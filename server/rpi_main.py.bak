import threading
import sys
import parameterlib as pl
from serverviews import server_app
import serverconfig as sc
import serverfunctions as sf
import ciermagtransducer

##############REMOTE DEBUG FEATURE FOR RASPBERRY#################################
sys.path.append('../')
from remotedebugfeature import RemoteDebug
sys.path.append("/home/pi/eclipse-PyDev/pysrc/")
import pydevd
global pydevd    
global remote_debug
################################################################################

looptime =[]
exit_var = True

def end_threads():

    if server.isAlive:
        server._Thread__stop()
        print "server ended"

    if transducer_manager.isAlive:
        transducer_manager._Thread__stop()
        print "manager ended"

    print "done"

class HTTPServer(threading.Thread):
    """HTTP Server to handle browser and client conections and TEDS management.
    """
    def __init__(self):
        threading.Thread.__init__(self)

    def run(self):
        server_app.run(host='0.0.0.0')

class TransducerManager(threading.Thread):
    """Perform transducer creation and operations"""
    def __init__(self):
        threading.Thread.__init__(self)

    def run(self):
        import ciermagthread
        import time #test only
        chengedtedslist = ciermagthread.changed_teds
        
        system_transducers = {}
        time1 = 0
        maxlen = 30 * 60 * 8

        global looptime

        while exit_var:
                
            for modteds in list(chengedtedslist):
                
                with ciermagthread.changed_teds_lock:
                    tedsdict = pl.load_teds(sc.MAIN_PATH + pl.TEDS_FOLDER + '/' + modteds)
                    system_transducers[tedsdict['ID']] = ciermagtransducer.Transducer(tedsdict)
                    chengedtedslist.remove(modteds)
                    print modteds, ' created'

                with ciermagthread.actuator_data_lock:
                    actuatordata = ciermagtransducer.create_actuator_data(system_transducers)
                    print(actuatordata)
                    sf.save_data(actuatordata, sc.MAIN_PATH + pl.FILE_FOLDER + '/' + pl.CONTROLLERDATAFILE)
                    
            if ciermagthread.actuator_update:
                
                with ciermagthread.actuator_data_lock:
                    actuatordata = sf.load_controllers_data(sc.MAIN_PATH + pl.FILE_FOLDER + '/' + pl.CONTROLLERDATAFILE)
                    print('Teste_actuator_data:')
                    print(actuatordata)
                    ciermagtransducer.process_actuator_data(actuatordata, system_transducers)
                    ciermagthread.actuator_update = False
                    actuatordata = ciermagtransducer.create_actuator_data(system_transducers)
                    sf.save_data(actuatordata,sc.MAIN_PATH + pl.FILE_FOLDER + '/' + pl.CONTROLLERDATAFILE)

            if time.time() > time1 + 5:
                
                with ciermagthread.sensor_data_lock:
                    sensordata = sf.load_sensor_data(sc.MAIN_PATH + pl.FILE_FOLDER + '/' + pl.SENSORDATAFILE)
                    ciermagtransducer.update_sensor_data(sensordata,system_transducers,maxlen)
                    sf.save_data(sensordata, sc.MAIN_PATH + pl.FILE_FOLDER + '/' + pl.SENSORDATAFILE)
                time1 = time.time()


            time.sleep(0.05)
            


if __name__ == "__main__":
    
    #####################REMOTE DEBUG CALL##########################
    remote_debug = False
    if remote_debug == True:
        RemoteDebug()    
    #################################################################
        
    server = HTTPServer()
    server.start()
    transducer_manager = TransducerManager()
    transducer_manager.start()
